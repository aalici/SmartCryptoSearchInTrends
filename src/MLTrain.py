# THIS SCRIPT IS AUTOGENERATED FROM MLTrain.ipynb. 


# export
import Financial_Indicators as fi
import numpy as np
import pandas as pd
import pickle


# export
def load_data():
    file = open("df_all.pkl","rb")
    df_all = pickle.load(file)
    return df_all


# export
def f_temp(x, thr):
    if x >= thr:
        return 1
    elif x <= 1- thr:
        return -1
    else:
        return 0


def f_temp3(x, thr):
    idx = np.argmax(x)
    if (idx == 0) & (x[idx] >= thr):
        return -1
    elif (idx == 1) & (x[idx] >= thr):
        return 0
    elif (idx == 2) & (x[idx] >= thr):
        return 1
    else:
        return -99    
    
    
def f_classif_report(clf, X, y, thr = 0.5):
    orig_len = len(y)
    
    if len(clf.predict_proba(X)[0]) == 3:
        y_pred = [f_temp3(x, thr) for x in clf.predict_proba(X)]
        np_array = np.array(y_pred)
        item_index = np.where((np_array==-1) | (np_array==1) | (np_array==0) )
        item_index = list(item_index[0])
        y_pred = [y_pred[x] for x  in item_index ]
        y_list = [x[0] for x in  y.values]
        y = [y_list[x] for x  in item_index ]
    elif len(clf.predict_proba(X)[0]) == 2:
        y_pred = [f_temp(x[1], thr) for x in clf.predict_proba(X)]
        np_array = np.array(y_pred)
        item_index = np.where((np_array==-1) | (np_array==1) )
        item_index = list(item_index[0])
        y_pred = [y_pred[x] for x  in item_index ]
        y_list = [x[0] for x in  y.values]
        y = [y_list[x] for x  in item_index ]
    
    last_len = len(y)
    
    loss = 1 - (last_len/orig_len)
    print("Lost on dataset: {x}".format(x = loss ) )  
    print(classification_report(y, y_pred))
    print(confusion_matrix(y, y_pred))
    return y, y_pred, loss


def f_prep_df_to_ML(df, is_train = True):
    df_tmp = df.copy()
    if is_train:
        df_tmp.dropna(inplace = True)
    y = df_tmp.loc[:, ["Target"]]
    X = df_tmp.loc[:, [ x for x in df_tmp.columns if x not in (["Target" 
                                                                ,"coin" 
                                                                ,"next1price" 
                                                                ,"next2price" 
                                                                ,"next3price" 
                                                                ,"price"
                                                               # ,"is_day_end"
                                                               # ,"last_time"
                                                               ])  ]]

    return X, y 

